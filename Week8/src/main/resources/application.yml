#
##spring:
##  shardingsphere:
##    props:
##      sql:      #sql打印
##        show: true
##      #executor:     #工作线程数量，默认值: CPU核数
##      #  size: 4
##
##
##    datasource:            #数据源配置
##      names: db0,db1   #数据库别名
##      db0:                 #数据源具体配置,这个可作为默认库
##        type: com.zaxxer.hikari.HikariDataSource
##        driver-class-name: com.mysql.jdbc.Driver
##        jdbc-url: jdbc:mysql://localhost:3316/shop_0?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&allowMultiQueries=true
##        username: root
##        #password: root
##      db1:                 #数据源具体配置
##        type: com.zaxxer.hikari.HikariDataSource
##        driver-class-name: com.mysql.jdbc.Driver
##        jdbc-url: jdbc:mysql://localhost:3316/shop_1?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&allowMultiQueries=true
##        username: root
##        #password: root
##
##
##    sharding:       ##分库分表规则
##      default-data-source-name: db      #默认数据源，放置不需要分片的表和广播表
##      broadcast-tables: user,product    #广播表，每个库都有独立的表
##      binding-tables: indent   ##绑定表配置
##      default-database-strategy:    #默认的分库规则,如果逻辑表没单独配置则使用这个
##        inline:
##          sharding-column: user_id    #默认按照customer_id分库，避免跨库查询
##          algorithm-expression: db$->{user_id % 2}
##      tables:       #逻辑表配置
###        config:               ###单库单表，使用UUID作为主键
###          actual-data-nodes: db.config
###          key-generator:
###            column: code
###            type: UUID
##        indent:
##          actual-data-nodes: db$->{0..1}.order_$->{0..1}
##          table-strategy:
##            inline:
##              sharding-column: order_id
##              algorithm-expression: order_$->{order_id % 2}
##          key-generator:
##            column: order_id
##            type: SNOWFLAKE
###        indent_detail:
###          actual-data-nodes: db$->{0..2}.indent_detail$->{0..1}
###          table-strategy:
###            inline:
###              sharding-column: indent_id
###              algorithm-expression: indent_detail$->{indent_id % 2}
###          key-generator:
###            column: detail_id
###            type: SNOWFLAKE
###        task:
###          actual-data-nodes: db$->{0..2}.task$->{0..1}  #具体的数据节点
###          database-strategy:   #分库规则
###            inline:
###              sharding-column: task_id
###              algorithm-expression: db$->{task_id % 3}
###          table-strategy:
###            inline:
###              sharding-column: task_id
###              algorithm-expression: task$->{task_id % 2}
###        task_upload:
###          actual-data-nodes: db$->{0..2}.task_upload$->{0..1}  #具体的数据节点
###          database-strategy:   #分库规则
###            inline:
###              sharding-column: task_id
###              algorithm-expression: db$->{task_id % 3}
###          table-strategy:
###            inline:
###              sharding-column: stack_code
###              algorithm-expression: task_upload$->{Math.abs(stack_code.hashCode() % 2)}
###          key-generator:
###            column: upload_id
###            type: SNOWFLAKE
###        code_relate:
###          actual-data-nodes: db$->{0..2}.code_relate$->{0..1}  #具体的数据节点
###          database-strategy:   #分库规则
###            inline:
###              sharding-column: task_id
###              algorithm-expression: db$->{task_id % 3}
###          table-strategy:
###            inline:
###              sharding-column: stack_code
###              algorithm-expression: code_relate$->{Math.abs(stack_code.hashCode() % 2)}
###          key-generator:
###            column: relate_id
###            type: SNOWFLAKE
#
#
#
#
#spring:
##  datasource:
##    driver-class-name: com.mysql.cj.jdbc.Driver
##    username: root
##    #password:root
##    url: jdbc:mysql://localhost:3316/shop?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
#
#  shardingsphere:         #数据源配置
#    datasource:
#      names: ds0, ds1    #数据库别名
#      ds0:                 #数据源具体配置,这个可作为默认库
#        type: com.zaxxer.hikari.HikariDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        jdbc-url: jdbc:mysql://localhost:3316/shop_0?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&allowMultiQueries=true
#        username: root
#      ds1:                    #数据源具体配置,这个可作为默认库
#        type: com.zaxxer.hikari.HikariDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        jdbc-url: jdbc:mysql://localhost:3316/shop_1?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&allowMultiQueries=true
#        username: root
#
#    sharding:
#      default-data-source-name: ds0     # 默认数据源
#      broadcast-tables:  user, product  # 广播表？ 数据量不大，没必要拆分 读取时随机读，写入时全都写
#      binding-tables: order             #绑定表配置
#      default-database-strategy:        # 默认分库规则 ，如果逻辑表没单独配置则使用这个
#        inline:
#          sharding-column: user_id
#          algorithm-expression: ds${user_id % 2}
#      tables:
#        order:
#          actual-data-nodes: ds${0..1}.order_${0..15} # 具体数据节点
#          table-stratagy:       # 分表策略
#            inline:
#              sharding-column: order_id       # 根据orderid 分表
#              algorithm-expression: order_${order_id % 16}
#          key-generator:
#            column: order_id
#            type: SNOWFLAKE
#            props:
#              worker:
#                id: 123
#
#
## shardingsphere:         #数据源配置
##    datasource:
##      names: ds0, ds1    #数据库别名
##      ds0:                 #数据源具体配置,这个可作为默认库
##        type: com.zaxxer.hikari.HikariDataSource
##        driver-class-name: com.mysql.jdbc.Driver
##        jdbc-url: jdbc:mysql://localhost:3316/shop_0?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&allowMultiQueries=true
##        username: root
##      ds1:                    #数据源具体配置,这个可作为默认库
##        type: com.zaxxer.hikari.HikariDataSource
##        driver-class-name: com.mysql.jdbc.Driver
##        jdbc-url: jdbc:mysql://localhost:3316/shop_1?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC&allowMultiQueries=true
##        username: root
##
##    sharding:
##      default-data-source-name: ds0     # 默认数据源
##      broadcast-tables:  user, product  # 广播表？ 数据量不大，没必要拆分 读取时随机读，写入时全都写
##      default-database-strategy:        # 默认分库规则 ，如果逻辑表没单独配置则使用这个
##        inline:
##          sharding-column: user_id
##          algorithm-expression: ds${user_id % 2}
##      tables:
##        order:
##          actual-data-nodes: ds${0..1}.order_${0..15} # 具体数据节点
##          table-stratagy:       # 分表策略
##            inline:
##              sharding-column: order_id       # 根据orderid 分表
##              algorithm-expression: order_${order_id % 16}
##          key-generator:
##            column: order_id
##            type: SNOWFLAKE
##            props:
##              worker:
##                id: 123
#
#
##          actualDataNodes: ds${0..1}.order_${0..15}
##            databaseStrategy:
##              inline:
##                shardingColumn: user_id
##                algorithmExpression: ds${user_id % 2}
##            tableStrategy:
##              inline:
##                shardingColumn: order_id
##                algorithmExpression: order_${order_id % 16}
##
##            key-generator:
##              column: order_id
##              type: SNOWFLAKE
##              props:
##                worker:
##                  id: 123
#
#
#mybatis-plus:
#  mapper-locations: classpath:/mapper/**/*.xml
##
#logging:
#  level:
#    com.example.week8.mapper: debug
